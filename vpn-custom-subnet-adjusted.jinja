# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Template for creating VPN gateway, forwarding rules, VPN tunnels and routes for custom subnet
# Refer to https://github.com/GoogleCloudPlatform/deploymentmanager-samples/tree/master/examples/v2/vpn_auto_subnet
# Input values are provided using --properties flag

resources:

## VPN GATEWAY
- type: compute.v1.targetVpnGateway
  name: {{ env["deployment"] }}-gateway
  properties:
    region: {{ properties["region"] }}
    network: {{ properties["network"] }}

## FORWARDING RULES - ESP
- type: compute.v1.forwardingRules
  name: {{ env["deployment"] }}-fr-esp
  properties:
    region: {{ properties["region"] }}
    IPProtocol: ESP
    IPAddress: {{ properties["vpn-ip"] }}
    #network: {{ properties["network"] }}
    target: $(ref.{{ env["deployment"] }}-gateway.selfLink)

## FORWARDING RULES - UDP 500
- type: compute.v1.forwardingRules
  name: {{ env["deployment"] }}-fr-udp500
  properties:
    region: {{ properties["region"] }}
    IPProtocol: UDP
    portRange: 500
    IPAddress: {{ properties["vpn-ip"] }}
    #network: {{ properties["network"] }}
    target: $(ref.{{ env["deployment"] }}-gateway.selfLink)

## FORWARDING RULES - UDP 4500
- type: compute.v1.forwardingRules
  name: {{ env["deployment"] }}-fr-udp4500
  properties:
    region: {{ properties["region"] }}
    IPProtocol: UDP
    portRange: 4500
    IPAddress: {{ properties["vpn-ip"] }}
    #network: {{ properties["network"] }}
    target: $(ref.{{ env["deployment"] }}-gateway.selfLink)

## VPN TUNNEL
- type: compute.v1.vpnTunnel
  name: {{ env["deployment"] }}-tunnel
  properties:
    region: {{ properties["region"] }}
    forwardingRule: $(ref.{{ env["deployment"] }}-fr-udp4500.selfLink)
    ikeVersion: {{ properties["ikeVersion"] }}
    peerIp: {{ properties["peerIp"] }}
    sharedSecret: {{ properties["sharedSecret"] }}
    targetVpnGateway: $(ref.{{ env["deployment"] }}-gateway.selfLink)
    localTrafficSelector: [0.0.0.0/0]
    remoteTrafficSelector: [0.0.0.0/0]

## FIREWALL - ALLOW ALL INBOUND FROM PEER NETWORK
- type: compute.v1.firewall
  name: {{ env["deployment"] }}-vpn-rule
  properties:
    network: {{ properties["network"] }}
    sourceRanges:
      - {{ properties["nodeCIDR"] }}
      - {{ properties["clusterCIDR"] }}
    allowed:
      - IPProtocol: tcp
      - IPProtocol: udp
      - IPProtocol: icmp

## ROUTES - ALL TRAFFIC OUTBOUND GOES TO PEER NETWORK
- type: compute.v1.route
  name: {{ env["deployment"] }}-route-1
  properties:
    network: {{ properties["network"] }}
    nextHopVpnTunnel: $(ref.{{ env["deployment"] }}-tunnel.selfLink)
    priority: 100
    destRange: {{ properties["nodeCIDR"] }}

- type: compute.v1.route
  name: {{ env["deployment"] }}-route-2
  properties:
    network: {{ properties["network"] }}
    nextHopVpnTunnel: $(ref.{{ env["deployment"] }}-tunnel.selfLink)
    priority: 100
    destRange: {{ properties["clusterCIDR"] }}


